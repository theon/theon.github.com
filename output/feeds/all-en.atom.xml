<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Just Some &lt;em&gt;Dev&lt;/em&gt;</title><link href="../." rel="alternate"></link><link href=".././feeds/all-en.atom.xml" rel="self"></link><id>../.</id><updated>2012-04-01T00:00:00Z</updated><entry><title>Five Reasons Scala is Awesome</title><link href=".././five-reasons-scala-is-awesome.html" rel="alternate"></link><updated>2012-04-01T00:00:00Z</updated><author><name>Ian Forsey</name></author><id>.././five-reasons-scala-is-awesome.html</id><summary type="html">&lt;p&gt;Scala is a really nice programming language to work with and is easy for devs coming from the Java world to pick up, due to the fact it runs on the JVM. I thought I'd share the five reasons I use Scala.&lt;/p&gt;
&lt;h1&gt;1. Case classes&lt;/h1&gt;
&lt;p&gt;Case classes are the Scala equivalent of Java POJOs - objects you use to hold state and often don't do a whole lot else. Here is a Case Class in Scala:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you omit the &lt;code&gt;case&lt;/code&gt; keyword you'd have a standard scala class, but the presence of the &lt;code&gt;case&lt;/code&gt; keyword auto-magically gives the class these benefits for free:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Autogenerated getter methods.&lt;/li&gt;
&lt;li&gt;Autogenerated equals() and hashCode() - based on all the class fields&lt;/li&gt;
&lt;li&gt;Autogenerated friendly toString() - displays Class names and all the class fields&lt;/li&gt;
&lt;li&gt;Autogenerated copy() method that can be used to create a copy of any objects of this class. The method takes arguments to change field values in the copy.&lt;/li&gt;
&lt;li&gt;No longer need to use the &lt;code&gt;new&lt;/code&gt; keyword to instansiate objects of this class.&lt;/li&gt;
&lt;li&gt;Pattern matching.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note how only getter methods are generated, not setter methods. This is because Scala promotes the use of immutable objects (hence the copy method), however if you do want to create a mutable case class with getters, you can use the &lt;code&gt;var&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pattern matching is a nice language feature in Scala. It allows you to use instances of your case classes along with wildcards in switch style statements:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;bingo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;Dog&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;,&lt;/span&gt; &amp;quot;&lt;span class="n"&gt;Woof&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;bingo&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &amp;quot;&lt;span class="n"&gt;Chirp&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;chirps&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Reptile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;subtype&lt;/span&gt; &lt;span class="n"&gt;Reptile&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;2. Named and Default Arguments&lt;/h1&gt;
&lt;p&gt;For constructor and method arguments you can specify defaults:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;Woof&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;Dog&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;res1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Woof&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also use similar syntax when calling a constructor or method to reference arguments by name, rather than position:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;Cat&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;Meow&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Meow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This comes in useful when you have many default arguments and need to highlight which arguments you want to specify.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;tiger&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;Roar&lt;/span&gt;!&amp;quot;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tiger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Roar&lt;/span&gt;!&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;3. Awesome Collections Framework&lt;/h1&gt;
&lt;p&gt;You can do some really nice things with the core collections framework. It's like the Guava, the Java library, but with nicer syntax. There is too much goodness to show here, but here are a few things you can do:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;animals&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;Cat&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;Dog&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;Mouse&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;takes&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;uses&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;animals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;res1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mouse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;Same&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;above&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;short&lt;/span&gt; &lt;span class="n"&gt;hand&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;animals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;res2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mouse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;res2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;D&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;res3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;res2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;res4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;3 &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;))(&lt;/span&gt;5 &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mouse&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;4. Integration with Java Libraries&lt;/h1&gt;
&lt;p&gt;Java and Scala code can be used together. You can call Java code from within Scala and vice versa. This is great, because you can still use all the great Java libraries you know and love. It also means you can start writing Scala code in exisitng Java systems - you don't have to go big bang and port everything to Scala to gain it's benefits at once.&lt;/p&gt;
&lt;h1&gt;5. Scala Console&lt;/h1&gt;
&lt;p&gt;Type &lt;code&gt;scala&lt;/code&gt; in your terminal and you get the Scala console. This is a great sandbox for testing stuff and makes it real easy to start playing. It's this same reason that made me fall in love with bash. &lt;/p&gt;
&lt;p&gt;PS. I used the Scala Console to write the examples for this blog post :)&lt;/p&gt;</summary><category term="Scala"></category></entry><entry><title>Things I learnt about using Amazon EC2</title><link href=".././things-i-learnt-about-using-amazon-ec2.html" rel="alternate"></link><updated>2012-04-01T00:00:00Z</updated><author><name>Ian Forsey</name></author><id>.././things-i-learnt-about-using-amazon-ec2.html</id><summary type="html">&lt;p&gt;Amazon EC2 is pretty awesome. In under a minute you can fire up a server in the cloud and SSH in. The SSH access combined with the fact you can run your choice of OS, makes it much more flexible than other cloud platforms as a service, such as Heroku, Google App Engine and Cloud Foundry. The down side is that there is a lot more configuration to do, so it is probably going to take a little longer to deploy your app, than it would with Heroku.&lt;/p&gt;
&lt;p&gt;I've used EC2 at work and have used it to deploy some small projects into production. Along the way I've compiled this list of lessons I've learnt the hard way.&lt;/p&gt;
&lt;h1&gt;Enable Termination Protection&lt;/h1&gt;
&lt;p&gt;These points aren't in any particular order, but if there is one thing to take away from the post, this is it: Turn on Termination Protection for your EC2 instances!&lt;/p&gt;
&lt;p&gt;So once you have your EC2 instance up and running, there are two states you can change it to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stopped&lt;/li&gt;
&lt;li&gt;Terminated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stopping an instance is kind of like the equivalent of shutting down a physical machine; you can get your instance back up and running later. Terminating an instance is kind of like the equivalent of picking up a physical machine and throwing it out the window; you're not going to be able to get it back up and running later.&lt;/p&gt;
&lt;p&gt;Unfortunately it is really easy to terminate an instance - right click on it and select 'Terminate'. That's it. No dialog asking you to confirm. No undo button. That instance is dead. This happened to me when I was looking to terminate a certain instance, but didn't realise that I also had another instance selected that was being used in production. When I clicked terminate, they both got killed - and believe me that's not fun!&lt;/p&gt;
&lt;p&gt;If you do accidentally terminate a instance, then don't panic. Despite the instance getting killed, the hard drive attached to it remains available so you can launch a new instance to replace it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click the &lt;img alt="Launch Instance" src="https://images-na.ssl-images-amazon.com/images/G/01/webservices/console/ec2/icon_launchinstances.png" /&gt; Launch Instance Button and go through the wizard choosing the same settings as per your terminated instance (same keypair for SSH access etc). You can use any AMI to launch from, it doesn't matter, because we will be deleting this instances Hard Drive, OS, etc.&lt;/li&gt;
&lt;li&gt;Immediately Stop the new instance&lt;/li&gt;
&lt;li&gt;Click on the Volumes from the left hand menu. You should see a new Hard Drive attached to the instance we just launched, as well as the hard drive from the instance we accidentally terminated (it will be unattached).&lt;/li&gt;
&lt;li&gt;Unattach the Volume from the new instance (you can also delete it as we no longer need it), and attach the other Volume. It will ask for the device name, which may vary depending on your set up. For a default Amazon Linux instance it is /dev/sda1.&lt;/li&gt;
&lt;li&gt;Start the instance and all should be good! If you were using an elastic IP, you will need to reattach it and if you are monitoring with Cloudkick (see below) you may need to update your setting in the Cloudkick dashboard.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you make enabling Termination Protection the first thing you do, then hopefully you will never need follow those instructions. Why it isn't enabled by default I don't know!&lt;/p&gt;
&lt;h1&gt;Release Unused Elastic IPs&lt;/h1&gt;
&lt;p&gt;Elastic IPs allow you to assign a static IP to your instances and they are free. That is they are free, but only provided you are using them. As soon as your Elastic IPs are not assigned to any instances, they will start coming up in your monthly bill. This is a measure from Amazon to stop people hording IPs, since they are in such short supply at the moment.&lt;/p&gt;
&lt;p&gt;So if you unassign one of your Elastic IPs and no longer plan to use it, then release it back into the pool. However, note that this means you will no longer be able to get that specific IP back.&lt;/p&gt;
&lt;h1&gt;Monitor with CloudKick&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.cloudkick.com/"&gt;Cloudkick&lt;/a&gt; is an awesome way to monitor the health of your EC2 instances and applications deployed to them. It is also free, so check it out!&lt;/p&gt;
&lt;p&gt;At the time of writing Cloudkick is transitioning to Rackspace Cloud Monitoring with Cloudkick dissapearing in a year or two, so watch out for that.&lt;/p&gt;
&lt;h1&gt;Name your instances&lt;/h1&gt;
&lt;p&gt;In fact name everything you can; Instances, Volumes, Snapshots, AMIs. Naming instances and the such is optional, but if you don't then it becomes some what more difficult picking the right Volume from a drop down list that contains vol-bc5e8dd4, vol-aca11cd and vol-a7fe7de.&lt;/p&gt;
&lt;p&gt;To name things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click the Tags tab&lt;/li&gt;
&lt;li&gt;Click the &lt;img alt="Add/Edit Tags" src="https://d1ge0kk1l5kms0.cloudfront.net/images/G/01/webservices/console/ec2/tags_icon.png" /&gt; Add/Edit Tags button&lt;/li&gt;
&lt;li&gt;There should already be a key prepopulated with 'Name'. Just fill in the value. &lt;/li&gt;
&lt;/ul&gt;</summary><category term="Amazon"></category><category term="EC2"></category><category term="Cloudkick"></category></entry></feed>